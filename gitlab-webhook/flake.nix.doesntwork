{
  description = "Haskell webhook for Gitlab TODO fill this out";

  inputs.stacklock2nix.url = "github:cdepillabout/stacklock2nix/main";

  inputs.nixpkgs.url = "github:NixOS/nixpkgs/nixpkgs-unstable";

  outputs = { self, nixpkgs, stacklock2nix }:
    let
      supportedSystems = [
        "x86_64-linux"
      ];

      # Helper function to generate an attrset '{ x86_64-linux = f "x86_64-linux"; ... }'.
      forAllSystems = f: nixpkgs.lib.genAttrs supportedSystems (system: f system);

      # Nixpkgs instantiated for supported system types.
      nixpkgsFor =
        forAllSystems (system: import nixpkgs { inherit system; overlays = [ stacklock2nix.overlay self.overlay ]; });
    in
    {
      overlay = final: prev: {
        # This is a top-level attribute that contains the result from calling
        # stacklock2nix.
        gitlab-webhook-stacklock = final.stacklock2nix {
          stackYaml = ./stack.yaml;

          baseHaskellPkgSet = final.haskell.packages.ghc924;

          # Any additional Haskell package overrides you may want to add.
          #additionalHaskellPkgSetOverrides = hfinal: hprev: {
          #};

          # Additional packages that should be available for development.
          additionalDevShellNativeBuildInputs = stacklockHaskellPkgSet: [
            # Some Haskell tools (like cabal-install and ghcid) can be taken from the
            # top-level of Nixpkgs.
            final.cabal-install
            final.stack
            final.haskell.packages.ghc924.haskell-language-server
            # Other Haskell tools may need to be taken from the stacklock2nix
            # Haskell package set, and compiled with the example same dependency
            # versions your project depends on.
            #stacklockHaskellPkgSet.some-haskell-lib
          ];

          # When creating your own Haskell package set from the stacklock2nix
          # output, you may need to specify a newer all-cabal-hashes.
          #
          # This is necessary when you are using a Stackage snapshot/resolver or
          # `extraDeps` in your `stack.yaml` file that is _newer_ than the
          # `all-cabal-hashes` derivation from the Nixpkgs you are using.
          #
          # If you are using the latest nixpkgs-unstable and an old Stackage
          # resolver, then it is usually not necessary to override
          # `all-cabal-hashes`.
          #
          # If you are using a very recent Stackage resolver and an old Nixpkgs,
          # it is almost always necessary to override `all-cabal-hashes`.
          #all-cabal-hashes = final.fetchurl {
          #  name = "all-cabal-hashes";
          #  url = "https://github.com/commercialhaskell/all-cabal-hashes/archive/9ab160f48cb535719783bc43c0fbf33e6d52fa99.tar.gz";
          #  sha256 = "sha256-QC07T3MEm9LIMRpxIq3Pnqul60r7FpAdope6S62sEX8=";
          #};
        };

        gitlab-webhook = final.gitlab-webhook-stacklock.pkgSet.gitlab-webhook;

        # You can also easily create a development shell for hacking on your local
        # packages with `cabal`.
        gitlab-webhook-dev-shell = final.gitlab-webhook-stacklock.devShell;
      };

      packages = forAllSystems (system: {
        gitlab-webhook = nixpkgsFor.${system}.gitlab-webhook;
      });

      defaultPackage = forAllSystems (system: self.packages.${system}.gitlab-webhook);

      devShells = forAllSystems (system: {
        gitlab-webhook-dev-shell = nixpkgsFor.${system}.gitlab-webhook-dev-shell;
      });

      devShell = forAllSystems (system: self.devShells.${system}.gitlab-webhook-dev-shell);
    };
}
